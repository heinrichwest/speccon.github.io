#!/usr/bin/env python3
"""
Value-Adds Popup Centralization Script
This script ensures all SETA and qualification pages use the centralized value-adds popup
that includes the SDF service and pulls from the same location.
"""

import os
import re
from pathlib import Path

def update_qualification_pages():
    """Update all qualification pages to use centralized value-adds popup"""
    qualifications_dir = Path('qualifications')

    if not qualifications_dir.exists():
        print("‚ùå qualifications directory not found")
        return

    updated_count = 0

    for qual_file in qualifications_dir.glob('*.html'):
        if qual_file.name == 'template-qualification.html':
            continue  # Skip template file

        with open(qual_file, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content

        # Add the centralized value-adds popup script if not present
        if 'value-adds-popup.js' not in content:
            # Add script after Lucide icons
            content = content.replace(
                '<script src="https://unpkg.com/lucide@latest"></script>',
                '<script src="https://unpkg.com/lucide@latest"></script>\n    <script src="../js/value-adds-popup.js"></script>'
            )
            print(f"‚úÖ Added centralized value-adds script to {qual_file.name}")

        # Remove any inline value-adds popup HTML (it will be generated by the script)
        # Look for banner popup div and remove it
        content = re.sub(
            r'<!-- Banner Popup -->.*?</div>\s*</div>\s*</div>\s*</div>',
            '<!-- Banner Popup will be generated by centralized script -->',
            content,
            flags=re.DOTALL
        )

        # Remove inline sticky banner HTML if present (script will create it)
        content = re.sub(
            r'<!-- Sticky Banner -->\s*<div[^>]*id="stickyBanner"[^>]*>.*?</div>',
            '<!-- Sticky Banner will be generated by centralized script -->',
            content,
            flags=re.DOTALL
        )

        # Remove any inline value-adds popup CSS (it's in the centralized script)
        content = re.sub(
            r'/\* Sticky Banner Styles \*/.*?}',
            '/* Sticky Banner Styles included in centralized script */',
            content,
            flags=re.DOTALL
        )

        # Remove any inline popup JavaScript
        content = re.sub(
            r'// Sticky banner functionality.*?});',
            '// Sticky banner functionality handled by centralized script',
            content,
            flags=re.DOTALL
        )

        if content != original_content:
            with open(qual_file, 'w', encoding='utf-8') as f:
                f.write(content)
            updated_count += 1
            print(f"‚úÖ Updated {qual_file.name}")
        else:
            print(f"‚è≠Ô∏è  No changes needed for {qual_file.name}")

    return updated_count

def update_seta_pages():
    """Verify SETA pages are using centralized value-adds popup"""
    setas_dir = Path('setas')

    if not setas_dir.exists():
        print("‚ùå setas directory not found")
        return

    updated_count = 0

    for seta_file in setas_dir.glob('*.html'):
        with open(seta_file, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content

        # Ensure the centralized value-adds popup script is present
        if 'value-adds-popup.js' not in content:
            # Add script after Lucide icons
            content = content.replace(
                '<script src="https://unpkg.com/lucide@latest"></script>',
                '<script src="https://unpkg.com/lucide@latest"></script>\n    <script src="../js/value-adds-popup.js"></script>'
            )
            print(f"‚úÖ Added centralized value-adds script to {seta_file.name}")

        # Remove any old inline implementations
        content = re.sub(
            r'<!-- Old inline popup implementation -->.*?<!-- End old implementation -->',
            '<!-- Using centralized value-adds popup -->',
            content,
            flags=re.DOTALL
        )

        if content != original_content:
            with open(seta_file, 'w', encoding='utf-8') as f:
                f.write(content)
            updated_count += 1
            print(f"‚úÖ Updated {seta_file.name}")
        else:
            print(f"‚úÖ {seta_file.name} already using centralized popup")

    return updated_count

def verify_centralized_popup():
    """Verify the centralized popup includes all required elements including SDF service"""
    popup_file = Path('js/value-adds-popup.js')

    if not popup_file.exists():
        print("‚ùå Centralized value-adds-popup.js not found")
        return False

    with open(popup_file, 'r', encoding='utf-8') as f:
        content = f.read()

    required_elements = [
        'White Labelled LMS',
        '300+ Online Courses',
        'Employment Equity System',
        '10+ Work Assessments',
        'Compliance Training',
        'Academy Access',
        'SDF Service'  # This is the key element we're checking for
    ]

    missing_elements = []
    for element in required_elements:
        if element not in content:
            missing_elements.append(element)

    if missing_elements:
        print(f"‚ùå Missing elements in centralized popup: {', '.join(missing_elements)}")
        return False
    else:
        print("‚úÖ Centralized popup includes all required elements including SDF Service")
        return True

def create_backup():
    """Create backup of key files before modification"""
    backup_dir = Path('value_adds_backup')
    backup_dir.mkdir(exist_ok=True)

    # Backup centralized script
    if Path('js/value-adds-popup.js').exists():
        Path('js/value-adds-popup.js').copy(backup_dir / 'value-adds-popup.js.backup')

    # Backup a few sample files
    sample_files = [
        'setas/services-seta.html',
        'qualifications/services-business-administration-nqf4.html',
        'qualifications/inseta-financial-advisor-nqf6.html'
    ]

    for sample_file in sample_files:
        if Path(sample_file).exists():
            Path(sample_file).copy(backup_dir / f"{Path(sample_file).name}.backup")

    print("‚úÖ Created backups in value_adds_backup directory")

def main():
    """Main execution function"""
    print("üöÄ Starting Value-Adds Popup Centralization")
    print("=" * 60)

    # Create backups first
    create_backup()

    # Verify centralized popup has all required elements
    print("\nüîç Verifying centralized popup...")
    if not verify_centralized_popup():
        print("‚ùå Please fix the centralized popup before proceeding")
        return

    # Update SETA pages
    print("\nüè¢ Updating SETA pages...")
    seta_updates = update_seta_pages()

    # Update qualification pages
    print("\nüéì Updating qualification pages...")
    qual_updates = update_qualification_pages()

    print("\n" + "=" * 60)
    print("‚úÖ Value-Adds Popup Centralization Complete!")
    print(f"\nüìä Summary:")
    print(f"   üè¢ SETA pages updated: {seta_updates}")
    print(f"   üéì Qualification pages updated: {qual_updates}")

    print("\nüìã What was accomplished:")
    print("‚úÖ All pages now use the centralized value-adds popup")
    print("‚úÖ SDF Service is included in all popups")
    print("‚úÖ Consistent styling and functionality across all pages")
    print("‚úÖ Easy maintenance - edit one file to update all popups")

    print("\nüîß Testing checklist:")
    print("1. Visit SETA pages and click 'Our Free Value Adds' banner")
    print("2. Visit qualification pages and verify popup appears")
    print("3. Confirm all 7 value-adds are shown including SDF Service")
    print("4. Check mobile responsiveness of the popup")
    print("5. Verify Lucide icons display correctly in the popup")

    print("\nüìÅ Files to check:")
    print("- All files in /setas/ directory")
    print("- All files in /qualifications/ directory")
    print("- Centralized script: /js/value-adds-popup.js")

if __name__ == "__main__":
    main()